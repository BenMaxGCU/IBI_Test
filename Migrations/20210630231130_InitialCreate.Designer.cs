// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechTestIBI.Context;

namespace TechTestIBI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210630231130_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TechTestIBI.Models.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractId");

                    b.HasIndex("RegionId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            ContractId = 1,
                            EndDateTime = new DateTime(2050, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionId = 578,
                            StartDateTime = new DateTime(2021, 7, 1, 0, 11, 30, 390, DateTimeKind.Local).AddTicks(1995)
                        },
                        new
                        {
                            ContractId = 2,
                            EndDateTime = new DateTime(2050, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionId = 246,
                            StartDateTime = new DateTime(2021, 7, 1, 0, 11, 30, 393, DateTimeKind.Local).AddTicks(4560)
                        },
                        new
                        {
                            ContractId = 3,
                            EndDateTime = new DateTime(2050, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionId = 208,
                            StartDateTime = new DateTime(2021, 7, 1, 0, 11, 30, 393, DateTimeKind.Local).AddTicks(4623)
                        });
                });

            modelBuilder.Entity("TechTestIBI.Models.ContractGroup", b =>
                {
                    b.Property<int>("ContractGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContractOrganisationOrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("ContractGroupId");

                    b.HasIndex("ContractOrganisationOrganisationId");

                    b.ToTable("ContractGroups");

                    b.HasData(
                        new
                        {
                            ContractGroupId = 1,
                            Name = "Group1",
                            OrganisationId = 130
                        },
                        new
                        {
                            ContractGroupId = 2,
                            Name = "Group2",
                            OrganisationId = 113
                        },
                        new
                        {
                            ContractGroupId = 3,
                            Name = "Group3",
                            OrganisationId = 147
                        });
                });

            modelBuilder.Entity("TechTestIBI.Models.ContractGroupContract", b =>
                {
                    b.Property<int>("ContractGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.HasKey("ContractGroupId", "ContractId");

                    b.HasIndex("ContractGroupId")
                        .IsUnique();

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("ContractGroupContracts");
                });

            modelBuilder.Entity("TechTestIBI.Models.ContractOrganisation", b =>
                {
                    b.Property<int>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrgName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganisationId");

                    b.ToTable("Organisations");

                    b.HasData(
                        new
                        {
                            OrganisationId = 130,
                            OrgName = "Sweden Rail"
                        },
                        new
                        {
                            OrganisationId = 113,
                            OrgName = "FinnRail"
                        },
                        new
                        {
                            OrganisationId = 142,
                            OrgName = "Norway Transport"
                        },
                        new
                        {
                            OrganisationId = 147,
                            OrgName = "Denmark Transport"
                        });
                });

            modelBuilder.Entity("TechTestIBI.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionId = 208,
                            RegionName = "Denmark"
                        },
                        new
                        {
                            RegionId = 246,
                            RegionName = "Finland"
                        },
                        new
                        {
                            RegionId = 578,
                            RegionName = "Norway"
                        },
                        new
                        {
                            RegionId = 752,
                            RegionName = "Sweden"
                        });
                });

            modelBuilder.Entity("TechTestIBI.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceNumber")
                        .HasColumnType("int");

                    b.HasKey("ServiceId");

                    b.HasIndex("ContractId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 101,
                            ContractId = 1,
                            ServiceNumber = 24
                        },
                        new
                        {
                            ServiceId = 102,
                            ContractId = 2,
                            ServiceNumber = 25
                        },
                        new
                        {
                            ServiceId = 103,
                            ContractId = 3,
                            ServiceNumber = 26
                        });
                });

            modelBuilder.Entity("TechTestIBI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("349271d8-1eb8-4356-bf25-afdd098fae7f"),
                            Name = "Jeff"
                        },
                        new
                        {
                            UserId = new Guid("cdf4bb34-255a-49ab-80a2-9dedd3363402"),
                            Name = "Chuck"
                        },
                        new
                        {
                            UserId = new Guid("cae0726c-a81c-49c0-ab47-757f65432c38"),
                            Name = "Sarah"
                        },
                        new
                        {
                            UserId = new Guid("f4db5c23-b6ca-40ff-9f82-4956da9174bd"),
                            Name = "Morgan"
                        });
                });

            modelBuilder.Entity("TechTestIBI.Models.Contract", b =>
                {
                    b.HasOne("TechTestIBI.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("TechTestIBI.Models.ContractGroup", b =>
                {
                    b.HasOne("TechTestIBI.Models.ContractOrganisation", "ContractOrganisation")
                        .WithMany()
                        .HasForeignKey("ContractOrganisationOrganisationId");

                    b.Navigation("ContractOrganisation");
                });

            modelBuilder.Entity("TechTestIBI.Models.ContractGroupContract", b =>
                {
                    b.HasOne("TechTestIBI.Models.ContractGroup", null)
                        .WithOne()
                        .HasForeignKey("TechTestIBI.Models.ContractGroupContract", "ContractGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechTestIBI.Models.Contract", null)
                        .WithOne()
                        .HasForeignKey("TechTestIBI.Models.ContractGroupContract", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechTestIBI.Models.Service", b =>
                {
                    b.HasOne("TechTestIBI.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });
#pragma warning restore 612, 618
        }
    }
}
